# Documentation for Config, Firmware, FlashFile, and FlashProgram

This document explains the relationship, functionality, and error handling mechanisms in the config, firmware, flashFile, and flash_program modules. It is important to note that ID = -1 is reserved for error handling and should not be used as a valid identifier for data entries.

## 1. Config Module

The config module manages configuration data such as integers and strings, allowing this data to be written to and read from flash memory. It provides functions to handle configuration data with robust error handling.

### Key Functions:

- **configWrite**:
    Writes a configuration value (integer or string) to memory.
    - **Parameters**:
        - name (string): The name of the config entry.
        - id (integer): The identifier for the entry (must not be -1).
        - type (char): 'i' for integer, 's' for string.
        - data (void*): Pointer to the data.
    - **Error Handling**:
        Returns `1` if the id is negative or the data pointer is null.
        If saving the name-ID pair using configSaveHandles fails, the error code from that function is returned.
    - **Returns**: `0` for success or an error code based on the outcome of the operation.

- **configUpdateInt**:
    Updates the value of an existing configuration integer using only the ID and new value.
    - **Parameters**:
        - id (integer): The identifier for the entry (must not be -1).
        - value (int): The new value to set.
    - **Error Handling**:
        Returns `1` if the ID is invalid or if the update fails.
    - **Returns**: `0` for success upon successful update.

- **configUpdateString**:
    Updates the value of an existing configuration string using only the ID and new value.
    - **Parameters**:
        - id (integer): The identifier for the entry (must not be -1).
        - str (const char*): The new string value to set.
    - **Error Handling**:
        Returns `1` if the ID is invalid or if the update fails.
    - **Returns**: `0` for success upon successful update.

- **configGetInt & configGetString**:
    Retrieves integer or string data using the entry ID.
    - **Error Handling**:
        If the entry cannot be found, these functions return `-1` to indicate failure.
        Important: ID `-1` is reserved for error handling and should not be used for valid data.
    - **Returns**: The requested value or `-1` if the entry is not found.

- **configGetIDFromName**:
    Retrieves the ID associated with a configuration name.
    - **Parameters**:
        - name (string): The name to look up.
    - **Error Handling**:
        Returns `-1` if the name cannot be found.
    - **Returns**: The ID tied to the name or an error code.

- **configOpen**:
    Opens the config.bin file in flash memory.
    - **Parameters**:
        - str (string): The handle for the config file.
    - **Error Handling**:
        Returns `1` for errors such as "Handle is already in use" or "Max handles reached" if opening fails.
    - **Returns**: `0` for success or an error code indicating the outcome.

- **flashConfig**:
    Writes configuration data from memory to flash.
    - **Error Handling**:
        Returns `1` if the flash operation fails.
    - **Returns**: `0` for success or an error code based on the operation.

## 2. Firmware Module

The firmware module functions similarly to the config module but is intended to handle firmware-related data. It manages integer and string entries for firmware settings.

### Key Functions:

- **firmwareWrite**:
    Writes firmware-related data to memory.
    - **Parameters**: Similar to configWrite.
    - **Error Handling**: Returns `1` for errors as in configWrite, providing specific error codes for firmware operations.

- **firmwareGetInt & firmwareGetString**:
    Retrieves firmware-related integer or string data using the entry ID.
    - **Error Handling**:
        Returns `-1` if the data cannot be found, with ID `-1` reserved for error handling.
    - **Returns**: The requested data or `-1` if the entry is not found.

- **firmwareGetIDFromName**:
    Retrieves the ID associated with a firmware name.
    - **Parameters**: Similar to configGetIDFromName.
    - **Error Handling**: Returns `-1` if the name is not found.
    - **Returns**: The ID tied to the name or an error code.

- **firmwareOpen**:
    Opens the firmware.bin file in flash memory.
    - **Parameters**:
        - str (string): The handle for the firmware file.
    - **Error Handling**:
        Returns `1` for errors such as "Handle is already in use" or "Max handles reached" if opening fails.
    - **Returns**: `0` for success or an error code indicating the outcome.

- **flashFirmware**:
    Writes firmware data from memory to flash.
    - **Error Handling**:
        Returns `1` if the flash operation fails.
    - **Returns**: `0` for success or an error code based on the operation.

## Function Call Order for Config, Firmware, FlashFile, and FlashProgram

This document outlines the recommended sequence of function calls to ensure proper initialization, reading, writing, and handling of configuration and firmware data using flash memory. The primary actions upon boot are loading the existing data using `loadConfig` and `loadFirmware`. The programmer can specify addresses for flash operations.

### 1. Boot-Up / Initial Setup

On boot, the first action is to load the configuration and firmware data from flash memory into working memory. This ensures the system is using the most recent and persistent settings.

#### Boot-Up Sequence:
- **loadConfig()**:
    - Loads existing `config.bin` data from flash memory into the systemâ€™s working memory.
    - Example: `loadConfig();`
    - Error Handling: Check the returned code to ensure the data is successfully loaded from flash.

- **loadFirmware()**:
    - Loads the `firmware.bin` data from flash memory.
    - Example: `loadFirmware();`
    - Error Handling: Verify that the firmware data was correctly loaded by checking the returned code.

### 2. Opening Files for Reading or Writing

After the data is loaded, if new data needs to be added, the respective file (`config.bin` or `firmware.bin`) must be opened for writing.

#### File Open Sequence:
- **configOpen()**:
    - Opens `config.bin` for adding new data.
    - Example: `configOpen("config.bin");`
    - Error Handling: The return code provides feedback, such as `0` for success or `1` for failure.

- **firmwareOpen()**:
    - Opens `firmware.bin` for adding new data.
    - Example: `firmwareOpen("firmware.bin");`
    - Error Handling: Similar to `configOpen()`, check the returned code for success or failure.

### 3. Adding New Configuration or Firmware Data

Once the files are opened, you can add new configuration or firmware data using `configWrite` and `firmwareWrite`.

#### Data Write Sequence:
- **Adding New Configuration Data**:
    - **configWrite()**:
        - Use this function to add new integer or string values to the configuration.
        - Example: `configWrite("pumpSetting", 0, 'i', &pumpSettingValue);`
        - Error Handling: Ensure that valid data is passed and check the returned code for success or failure.

- **Adding New Firmware Data**:
    - **firmwareWrite()**:
        - Use this function to add new integer or string values to the firmware.
        - Example: `firmwareWrite("firmwareSetting", 1, 's', firmwareString);`
        - Error Handling: Similar to `configWrite()`, verify the success of the operation using the returned code.

### 4. Updating Existing Configuration or Firmware Data

To update existing values without needing to pass the name, you can use:
- **configUpdateInt()**:
    - Updates the value of an existing configuration integer based on its ID.
    - Example: `configUpdateInt(0, newValue);`

- **configUpdateString()**:
    - Updates the value of an existing configuration string based on its ID.
    - Example: `configUpdateString(1, "New String Value");`

- **firmwareUpdateInt()**:
    - Updates the value of an existing firmware integer based on its ID.
    - Example: `firmwareUpdateInt(0, newFirmwareValue);`

- **firmwareUpdateString()**:
    - Updates the value of an existing firmware string based on its ID.
    - Example: `firmwareUpdateString(1, "New Firmware String Value");`

### 5. Reading Existing Data from Configuration or Firmware

After the system is loaded, you may want to retrieve previously stored configuration or firmware data.

#### Data Read Sequence:
- **Reading Configuration Data**:
    - **configGetInt()** or **configGetString()**:
        - Retrieve integer or string data from the configuration.
        - Example:
            ```cpp
            int configValue = configGetInt(0);
            const char* configString = configGetString(1);
            ```
        - Error Handling: If the data is not found, these functions will return `-1` for integers or `nullptr` for strings.

- **Reading Firmware Data**:
    - **firmwareGetInt()** or **firmwareGetString()**:
        - Retrieve integer or string data from the firmware.
        - Example:
            ```cpp
            int firmwareValue = firmwareGetInt(0);
            const char* firmwareString = firmwareGetString(1);
            ```
        - Error Handling: Similar to the configuration data, `-1` or `nullptr` indicates an error or missing data.

### 6. Saving Data to Flash

After new data is added via `configWrite()` or `firmwareWrite()`, it needs to be written to flash memory to ensure persistence.

#### Save Data Sequence:
- **Saving Configuration to Flash**:
    - **flashConfig()**:
        - Flushes the newly added configuration data to flash memory.
        - Example: `flashConfig();`
        - Error Handling: If the save operation fails, an appropriate error code will be returned.

- **Saving Firmware to Flash**:
    - **flashFirmware()**:
        - Flushes newly added firmware data to flash memory.
        - Example: `flashFirmware();`
        - Error Handling: Similar to `flashConfig()`, ensure success by checking the returned code.

### 7. Retrieving IDs by Name

In scenarios where you need to retrieve an ID based on a name, use the following functions.

#### Retrieve ID Sequence:
- **configGetIDFromName()**:
    - Retrieves the ID tied to a specific configuration name.
    - Example: `int configID = configGetIDFromName("pumpSetting");`
    - If the name is not found, the function will return `-1`, which should be handled as an error.

- **firmwareGetIDFromName()**:
    - Similar to `configGetIDFromName()`, this function retrieves the ID associated with a firmware name.
    - Example: `int firmwareID = firmwareGetIDFromName("firmwareSetting");`
    - Error Handling: Ensure `-1` is not returned.

## Summary of Function Call Order:
- **Boot-Up**:
    - `loadConfig()` â†’ `loadFirmware()`

- **Open Files (for adding new data)**:
    - `configOpen()` â†’ `firmwareOpen()`

- **Add New Data**:
    - `configWrite()` â†’ `firmwareWrite()`
  
- **Update Existing Data**:
    - `configUpdateInt()` â†’ `configUpdateString()`
    - `firmwareUpdateInt()` â†’ `firmwareUpdateString()`

- **Read Existing Data**:
    - `configGetInt()` â†’ `configGetString()`
    - `firmwareGetInt()` â†’ `firmwareGetString()`

- **Save to Flash**:
    - `flashConfig()` â†’ `flashFirmware()`

- **Retrieve IDs**:
    - `configGetIDFromName()` â†’ `firmwareGetIDFromName()`

By following this sequence, developers can ensure the proper flow of adding, updating, reading, and writing configuration and firmware data, while robust error handling ensures stability and reliability in the system.

